#!/usr/bin/env node
"use strict";function _toConsumableArray(arr){if(Array.isArray(arr)){for(var i=0,arr2=Array(arr.length);i < arr.length;i++) arr2[i] = arr[i];return arr2;}else {return Array.from(arr);}}var sslinfo=require("sslinfo");var chalk=require("chalk");var tlsHandshake=require("./tls/tls-handshake");var Queue=require("nbqueue");var ciphers=require("../ciphers.json");var cipherIDs=[];var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=ciphers[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var cipher=_step.value;cipherIDs.push.apply(cipherIDs,_toConsumableArray(cipher.id));}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator["return"]){_iterator["return"]();}}finally {if(_didIteratorError){throw _iteratorError;}}}function getCipherName(id){var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=ciphers[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var cipher=_step2.value;if(cipher.id[0] == id[0] && cipher.id[1] == id[1]){return cipher.name;}}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2["return"]){_iterator2["return"]();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}var host=process.argv[2];var sslVersions=["SSLv1.0","SSLv2.0","SSLv3.0","TLSv1.0","TLSv1.1","TLSv1.2"];var progress=new (require("progress"))("Testing ciphers [:bar] :current/:total (:percent) :etas",{complete:"=",incomplete:" ",width:40,total:sslVersions.length * ciphers.length});var tlsChecks={};function tick(next,sslVersion,cipherID,pass){tlsChecks[sslVersion].push({name:getCipherName(cipherID),supported:pass});progress.tick(1);setTimeout(next,300);}var queue=new (require("nbqueue"))(10);var promises=[];var _iteratorNormalCompletion3=true;var _didIteratorError3=false;var _iteratorError3=undefined;try{var _loop=function(){var sslVersion=_step3.value;tlsChecks[sslVersion] = [];_iteratorNormalCompletion6 = true;_didIteratorError6 = false;_iteratorError6 = undefined;try{var _loop2=function(){var cipher=_step6.value;queue.add(function(next){promises.push(tlsHandshake(host,cipher.id,sslVersion).then(function(msg){return tick(next,sslVersion,cipher.id,true);})["catch"](function(e){return tick(next,sslVersion,cipher.id,false);}));});};for(_iterator6 = ciphers[Symbol.iterator]();!(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done);_iteratorNormalCompletion6 = true) {_loop2();}}catch(err) {_didIteratorError6 = true;_iteratorError6 = err;}finally {try{if(!_iteratorNormalCompletion6 && _iterator6["return"]){_iterator6["return"]();}}finally {if(_didIteratorError6){throw _iteratorError6;}}}};for(var _iterator3=sslVersions[Symbol.iterator](),_step3;!(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done);_iteratorNormalCompletion3 = true) {var _iteratorNormalCompletion6;var _didIteratorError6;var _iteratorError6;var _iterator6,_step6;_loop();}}catch(err) {_didIteratorError3 = true;_iteratorError3 = err;}finally {try{if(!_iteratorNormalCompletion3 && _iterator3["return"]){_iterator3["return"]();}}finally {if(_didIteratorError3){throw _iteratorError3;}}}queue.done(function(){Promise.all(promises).then(function(){console.log("\n");var _iteratorNormalCompletion4=true;var _didIteratorError4=false;var _iteratorError4=undefined;try{for(var _iterator4=Object.keys(tlsChecks)[Symbol.iterator](),_step4;!(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done);_iteratorNormalCompletion4 = true) {var sslVersion=_step4.value;var supportedCiphers=tlsChecks[sslVersion].filter(function(cipher){return cipher.supported;});console.log(sslVersion);console.log("--------------------");if(supportedCiphers.length > 0){var _iteratorNormalCompletion5=true;var _didIteratorError5=false;var _iteratorError5=undefined;try{for(var _iterator5=supportedCiphers.sort(function(a,b){return a < b;})[Symbol.iterator](),_step5;!(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done);_iteratorNormalCompletion5 = true) {var cipher=_step5.value;console.log("   " + chalk.green("✓") + " " + cipher.name);}}catch(err) {_didIteratorError5 = true;_iteratorError5 = err;}finally {try{if(!_iteratorNormalCompletion5 && _iterator5["return"]){_iterator5["return"]();}}finally {if(_didIteratorError5){throw _iteratorError5;}}}}else {console.log("   " + chalk.red("✗") + " no supported ciphers");}console.log("\n");}}catch(err) {_didIteratorError4 = true;_iteratorError4 = err;}finally {try{if(!_iteratorNormalCompletion4 && _iterator4["return"]){_iterator4["return"]();}}finally {if(_didIteratorError4){throw _iteratorError4;}}}})["catch"](function(e){return console.log(e);});});