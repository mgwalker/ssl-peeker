#!/usr/bin/env node
"use strict";var sslinfo=require("sslinfo");var chalk=require("chalk");if(process.argv.length < 3){console.log();console.log("Usage: ssl-peeker <host> [port]");console.log();}else {var hostname=process.argv[2];var port=Number(process.argv[3]) || 443;if(port < 0 || port > 65535){port = 443;}console.log("==================================================");console.log("  Peeking at " + hostname + ":" + port);sslinfo.getServerResults({host:hostname,port:port}).done(function(results){console.log("--- Certificate ----------------------------------");console.log("  CN: " + results.cert.subject.commonName);console.log("  ON: " + results.cert.subject.organizationName);console.log("  Issuer:");console.log("    CN: " + results.cert.issuer.commonName);console.log("    ON: " + results.cert.issuer.organizationName);console.log("  Valid:");console.log("    After: " + results.cert.notBefore);console.log("    Until: " + results.cert.notAfter);console.log("--- Protocols ------------------------------------");var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=results.protocols[Symbol.iterator](),_step;!(_iteratorNormalCompletion = (_step = _iterator.next()).done);_iteratorNormalCompletion = true) {var proto=_step.value;console.log("  " + proto.name + " - " + (proto.enabled?chalk.green("ENABLED"):chalk.red("disabled")));}}catch(err) {_didIteratorError = true;_iteratorError = err;}finally {try{if(!_iteratorNormalCompletion && _iterator["return"]){_iterator["return"]();}}finally {if(_didIteratorError){throw _iteratorError;}}}console.log("--- Ciphers --------------------------------------");for(var cipherMethod in results.ciphers) {if(results.ciphers.hasOwnProperty(cipherMethod)){var cipherFamily=results.ciphers[cipherMethod];console.log("  " + cipherFamily.name + " ciphers:");var _iteratorNormalCompletion2=true;var _didIteratorError2=false;var _iteratorError2=undefined;try{for(var _iterator2=cipherFamily.enabled[Symbol.iterator](),_step2;!(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done);_iteratorNormalCompletion2 = true) {var cipher=_step2.value;console.log("    " + cipher);}}catch(err) {_didIteratorError2 = true;_iteratorError2 = err;}finally {try{if(!_iteratorNormalCompletion2 && _iterator2["return"]){_iterator2["return"]();}}finally {if(_didIteratorError2){throw _iteratorError2;}}}}}},function(error){console.log("Error");console.log(error);});}